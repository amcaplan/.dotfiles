export DOTFILES=$HOME/.dotfiles/

# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles

# your project folder that we can `c [tab]` to
export PROJECTS=~/Code

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# all of our zsh files
typeset -U config_files
config_files=($ZSH/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

# [[ -s "$HOME/.profile" ]] && source "$HOME/.profile" # Load the default .profile

# export TERM="xterm-color"
# PS1='\[\e[0;33m\]\u\[\e[0m\]@\[\e[0;32m\]\h\[\e[0m\]:\[\e[0;34m\]\w\[\e[0m\]\$ '

# Configuring Our Prompt
# ======================
  # Better tab completion - not necessary in zsh?
#  bind "set completion-ignore-case on"
#  bind "set show-all-if-ambiguous on"

  # This function is called in your prompt to output your active git branch.
  function parse_git_branch() {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
  }

  # This function builds your prompt. It is called below
  function prompt {
    # Define some local colors
    local         RED="\[\033[0;31m\]" # This syntax is some weird bash color thing I never
    local   LIGHT_RED="\[\033[1;31m\]" # really understood
    local     YELLERZ="\[33;44m]" # yellow text on a blue background
    local        CHAR=">"
    # ♥ ☆ - Keeping some cool ASCII Characters for reference

    # Here is where we actually export the PS1 Variable which stores the text for your prompt
      export PS1="${PS1:0:-2}%{$fg[green]%}[°‿°]%{$reset_color%}> "
      PS2='> '
      PS4='+ '
    }

  # Finally call the function and our prompt is all pretty
  prompt

  # For more prompt coolness, check out Halloween Bash:
  # http://xta.github.io/HalloweenBash/

  # If you break your prompt, just delete the last thing you did.
  # And that's why it's good to keep your dotfiles in git too.

# Environment Variables
# =====================
  # Library Paths
  # These variables tell your shell where they can find certain
  # required libraries so other programs can reliably call the variable name
  # instead of a hardcoded path.

    # NODE_PATH
    # Node Path from Homebrew I believe
    export NODE_PATH="/usr/local/lib/node_modules:$NODE_PATH"

  # Configurations

    # GIT_MERGE_AUTO_EDIT
    # This variable configures git to not require a message when you merge.
    export GIT_MERGE_AUTOEDIT='no'

    # Editors
    # Tells your shell that when a program requires various editors, use MacVim.
    export VISUAL="mvim -f"
    export SVN_EDITOR="mvim -f"
    export GIT_EDITOR="mvim +star -f"
    export EDITOR="mvim -f"

  # Paths

    # The USR_PATHS variable will just store all relevant /usr paths for easier usage
    # Each path is seperate via a : and we always use absolute paths.

    # A bit about the /usr directory
    # The /usr directory is a convention from linux that creates a common place to put
    # files and executables that the entire system needs access too. It tries to be user
    # independent, so whichever user is logged in should have permissions to the /usr directory.
    # We call that /usr/local. Within /usr/local, there is a bin directory for actually
    # storing the binaries (programs) that our system would want.
    # Also, Homebrew adopts this convetion so things installed via Homebrew
    # get symlinked into /usr/local
    export USR_PATHS="/usr/local:/usr/local/bin:/usr/local/sbin:/usr/bin:/Users/acaplan/bin"

    # Hint: You can interpolate a variable into a string by using the $VARIABLE notation as below.

    # We build our final PATH by combining the variables defined above
    # along with any previous values in the PATH variable.

    # Our PATH variable is special and very important. Whenever we type a command into our shell,
    # it will try to find that command within a directory that is defined in our PATH.
    # Read http://blog.seldomatt.com/blog/2012/10/08/bash-and-the-one-true-path/ for more on that.
    export PATH="$USR_PATHS:$PATH"

    # If you go into your shell and type: $PATH you will see the output of your current path.
    # For example, mine is:
    # /Users/avi/.rvm/gems/ruby-1.9.3-p392/bin:/Users/avi/.rvm/gems/ruby-1.9.3-p392@global/bin:/Users/avi/.rvm/rubies/ruby-1.9.3-p392/bin:/Users/avi/.rvm/bin:/usr/local:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/local/mysql/bin:/usr/local/share/python:/bin:/usr/sbin:/sbin:

    export GOPATH=/Users/$USER/.gocode
    export PATH="$GOPATH/bin;$PATH"

# Helpful Functions
# =====================

# A function to CD into the desktop from anywhere
# so you just type desktop.
# HINT: It uses the built in USER variable to know your OS X username

# USE: desktop
#      desktop subfolder
function desktop {
  cd /Users/$USER/Desktop/$@
}

# A function to easily grep for a matching process
# USE: psg postgres
function psg {
  FIRST=`echo $1 | sed -e 's/^\(.\).*/\1/'`
  REST=`echo $1 | sed -e 's/^.\(.*\)/\1/'`
  ps aux | grep "[$FIRST]$REST"
}

# A function to extract correctly any archive based on extension
# USE: extract imazip.zip
#      extract imatar.tar
function extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)  tar xjf $1      ;;
            *.tar.gz)   tar xzf $1      ;;
            *.bz2)      bunzip2 $1      ;;
            *.rar)      rar x $1        ;;
            *.gz)       gunzip $1       ;;
            *.tar)      tar xf $1       ;;
            *.tbz2)     tar xjf $1      ;;
            *.tgz)      tar xzf $1      ;;
            *.zip)      unzip $1        ;;
            *.Z)        uncompress $1   ;;
            *)          echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Protect from accidental exits of the shell
# https://apple.stackexchange.com/a/219997
function exit () {
    read -t5 -n1 -p "Do you really wish to exit? [yN] " should_exit || should_exit=y
    case $should_exit in
        [Yy] ) builtin exit $1 ;;
        * ) printf "\n" ;;
    esac
}

# Presentation
# =====================
  # Syntax highlighting for less
  export LESSOPEN="| /usr/local/bin/src-hilite-lesspipe.sh %s"
  export LESS=" -R "
  alias less='less -m -N -g -i -J --underline-special --SILENT'

# Configuration
# =====================
  # Somehow this enables CTRL+s for forward history search
  stty -ixon

# Aliases
# =====================
  # LS
  alias l='ls -lah'
  alias lisp='rlwrap sbcl'

  # Git
  alias gst="git status"
  alias gl="git pull"
  alias gp="git push"
  function gd() {
    git diff "$@" | mvim - -d -f -R
  }
  alias gc="git commit -v"
  alias gca="git commit -v -a"
  alias gb="git branch"
  alias gba="git branch -a"
  alias check="check_everything"
  alias gg="git grep -n --color=always"
  # git grep decorated with blame
  function ggb() {
    git grep -n $1 | while IFS=: read i j k; do git blame -L $j,$j $i | cat; done
  }
  # ...and return the top hits
  function ggbt() {
    ggb $@ | sort -t' ' -k4 -r | head -10
  }
  # Better version of git add -p
  function gap() {
    # Switch to a subshell to change directory
    (
      # Change to the root of the Git repository
      cd "$(git rev-parse --show-toplevel)" || exit

      # Stage new files interactively
      for file in $(git ls-files --others --exclude-standard); do
        echo -n "Add new file '$file'? (y/n) "
        read choice
        if [[ $choice == "y" ]]; then
          git add "$file"
        fi
      done

      # Now run git add -p for modified files
      git add -p
    )
  }
  function gup() {
    if [ -z "$1" ]; then
      git fetch origin master:master && git rebase master --autostash
    else
      git fetch origin ${1}:${1} && git rebase ${1} --autostash
    fi
  }
  function gpf() {
    git push --force-with-lease
  }
  function fixup() {
    git commit --fixup $1
    GIT_SEQUENCE_EDITOR=touch git rebase -i $1^^ --autosquash --autostash
  }

  # Hub
  function pro() {
    gh pr create --web -B $1
  }
  function prom() { pro master; }
  function pron() { pro next; }
  function prod() { pro develop; }
  function approve() {
    regex="(https?://)?github.com/(.+)/(.+)/pull/([0-9]+)"
    if [[ $1 =~ $regex ]]; then
      hub api /repos/${BASH_REMATCH[2]}/${BASH_REMATCH[3]}/pulls/${BASH_REMATCH[4]}/reviews --field event=APPROVE;
    else
      echo "Valid PR URL not provided\!";
    fi
  }

  alias icloud='cd ~/Library/Mobile\ Documents/'

# Docker
# =====================
  alias cop="docker-compose run web bundle exec rubocop --rails --fail-level autocorrect"
  alias dbuild="docker-compose build"

  function drspec() {
    docker-compose run web bundle exec rspec "$@"
  }

  function drake() {
    docker-compose run web bundle exec rake "$@"
  }

  function drails() {
    docker-compose run web bundle exec rails "$@"
  }

  function drapes() {
    drspec -t type:apivore "$@"
  }

  function drunit() {
    drspec -t ~type:apivore "$@"
  }

  function safely() {
    drspec && cop && "$@"
  }

# Proprietary thingz
# =====================
  source ~/.proprietary_bash_functions

# Final Configurations and Plugins
# =====================
  # Git Bash Completion
  # Will activate bash git completion if installed
  # via homebrew
  if [ -f `brew --prefix`/etc/bash_completion ]; then
    . `brew --prefix`/etc/bash_completion
  fi

[[ -f /opt/dev/sh/chruby/chruby.sh ]] && type chruby >/dev/null 2>&1 || chruby () { source /opt/dev/sh/chruby/chruby.sh; chruby "$@"; }
[[ -f /opt/dev/sh/chruby/auto.sh ]] && type chruby >/dev/null 2>&1 || chruby () { source /opt/dev/sh/chruby/auto.sh; }

[[ -x /usr/local/bin/brew ]] && eval $(/usr/local/bin/brew shellenv)

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# pnpm
export PNPM_HOME="/Users/amcaplan/Library/pnpm"
export PATH="$PNPM_HOME:$PATH"
# pnpm end

export WASMTIME_HOME="$HOME/.wasmtime"

export PATH="$WASMTIME_HOME/bin:$PATH"