#!/usr/bin/ruby
require 'irb/completion'
require 'irb/ext/eval_history' rescue nil
require 'rubygems'
if defined?(Bundler)
  Gem.post_reset_hooks.reject! do |hook|
    hook.source_location.first =~ %r{/bundler/}
  end

  Gem::Specification.reset
  # load "rubygems/custom_require.rb"
end

%w(
  awesome_print
  pry
  pry-nav
  pry-coolline
  pry-doc
).each do |gem|
  begin
    require gem
  rescue LoadError
    warn "#{gem} is not installed."
  end
end

if RUBY_VERSION < '3'
  IRB::Irb.class_eval do
    def output_value
      print "=> "
      ap @context.last_value
    end
  end
end

IRB.conf[:SAVE_HISTORY] = 1000
IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb_history"
IRB.conf[:AUTO_INDENT] = true

class Object
  # list methods which aren't in superclass
  def local_methods(obj = self)
    (obj.methods - obj.class.superclass.instance_methods).sort
  end

  # print documentation
  #
  #   ri 'Array#pop'
  #   Array.ri
  #   Array.ri :pop
  #   arr.ri :pop
  def ri(method = nil)
    unless method && method =~ /^[A-Z]/ # if class isn't specified
      klass = self.kind_of?(Class) ? name : self.class.name
      method = [klass, method].compact.join('#')
    end
    puts `ri '#{method}'`
  end

  def lm
    (self.methods - Object.methods).sort
  end

  def lim
    (self.instance_methods - Object.instance_methods).sort
  end
end

def me
  User.find_by_login(ENV['USER'].strip)
end

def r
  reload!
end

# Pry.start if defined?(Pry)
# exit
